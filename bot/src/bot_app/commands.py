from aiogram import types
from datetime import datetime

from .app import bot, dp, db, scheduler
from . keyboards import langMenu, mainMenu
from .translations import _
from . local_settings import ADMIN_IDS, TEXT_MESSAGE
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_test_message():
    users = db.get_users()
    print(users)
    i = 0
    for user_tuple in users:
        user_id = user_tuple[0]
        try:
            username = await get_username(user_id)
            text_message = TEXT_MESSAGE.format(username=username)
            await bot.send_message(user_id, text_message, disable_web_page_preview=True)
        except (BotBlocked, ChatNotFound, UserDeactivated):
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}. –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {e}")

async def get_username(user_id: int) -> str:
    user = await bot.get_chat(user_id)
    return user.first_name if user.first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not db.user_exists(message.from_user.id):
        await message.answer('üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ üåê\n\nüåç –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ç—ñ“£ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞—É—ã“£—ã–∑–¥—ã —Å“±—Ä–∞–π–º—ã–∑ üì£\n\nüåü Please select your preferred interface language üåê', reply_markup=langMenu)
    else:
        lang = db.get_lang(message.from_user.id)
        await message.answer(_('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', lang), reply_markup=mainMenu(lang))

@dp.message_handler(commands=['sendall'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id in ADMIN_IDS:
            text = message.text[9:]
            users = db.get_users()
            for row in users:
                await bot.send_message(row[0], text)
            await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
def get_current_month_and_year():
    now = datetime.now()
    return now.strftime("%B"), now.year

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistics
@dp.message_handler(commands=['stat'])
async def statistics(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id in ADMIN_IDS:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
                current_month, current_year = get_current_month_and_year()

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                total_users = len(db.get_users())

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                statistics_message = f"üìä Statistics for {current_month} {current_year} üìä\n\n"
                statistics_message += f"Total Users: {total_users}\n"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                await message.reply(statistics_message)

            except Exception as e:
                await message.reply(f"An error occurred: {str(e)}") 

@dp.callback_query_handler(text_contains="lang_")
async def setLanguage(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    lang = callback.data[5:]

    if not db.user_exists(callback.from_user.id):
        db.add_user(callback.from_user.id, lang)
        await bot.send_message(callback.from_user.id, _('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!', lang), reply_markup=mainMenu(lang))
    else:
        db.update_lang(callback.from_user.id, lang)
        await bot.send_message(callback.from_user.id, _('–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', lang), reply_markup=mainMenu(lang))


'''
# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
scheduler.add_job(send_test_message, 'interval', seconds=100)
'''
#scheduler.add_job(send_test_message, 'cron', day_of_week='mon', hour=8)
scheduler.add_job(send_test_message, 'interval', weeks=1)
